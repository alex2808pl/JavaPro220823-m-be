1. Вы въезжаете в отель и подходите к стойке администратора. За стойкой никого нет,
но на ней стоит звоночек, используя который Вы можете позвать администратора.
Т.к. наплыв гостей очень редко бывает большим, чтобы организовывалась очередь,
администратор обычно "уходит по своим делам", обслужив Вас и ждет следующего звонка.
Напишите программу, которая автоматизирует данный процесс обслуживания.
Гость и Администратор - отдельные потоки приложения.
Используйте wait / notify механизм многопоточности

2. Есть Магазин, на котором может одновременно разместиться ограниченное количество товара
(для примера можно взять 3 единицы, а лучше попросить пользователя ввести количество).
За один раз Поставщик может привезти 1 шт. товара.
Покупатель тоже может приобрести только 1 шт. товара.
Напишите программу, которая позволит Покупателям приобретать товар и нужно сделать так,
чтобы полки магазина не пустовали ;)
Используйте wait / notify механизм многопоточности. Поставщик и Покупатель/ли -
это разные потоки.

3*. У вас есть автобус, которым Вы перевозите пассажиров. На конечной остановке
Водитель ставит на загрузку автобус и сам уходит перекусить. Набился полный
автобус, дверь удалось еле закрыть. И тут Водитель просит передать за проезд.
Представляете какой поток денежных средств на него хлынет? ;)
Создайте программу, которая поможет Водителю упорядочить передачу денег так,
чтобы деньги от каждого Пассажира приходили строго по очереди а не всем скопом.
Используйте wait / notify(notifyAll) механизм многопоточности.
Водитель это строго отдельный поток.

это разные потоки.